# espanso match file
# For a complete introduction, visit the official docs at: https://espanso.org/docs/

matches:
  # ==============================================================================
  # Docker Commands
  # ==============================================================================
  - trigger: ':docker list'
    replace: |
      docker prune
      docker volume prune
      docker unioss import
      docker compose mysql
      docker compose laravel
      docker build laravel


  - trigger: ':docker prune'
    replace: 'docker system prune -a --volumes --force'
  - trigger: ':docker volume prune'
    replace: 'docker volume rm -f $(docker volume ls -q)'
  - trigger: ':docker unioss import'
    replace: 'docker exec -i mysql-unioss3 mysql -umaster002 -pPmaster002W db_unioss < ./db_unioss.sql'

  # ==============================================================================
  # Docker Images
  # ==============================================================================
  - trigger: ':docker compose mysql'
    replace: |
      proofly-mysql:
        container_name: proofly-mysql
        restart: always
        image: mysql:8.0
        ports:
          - 3306:3306
        command:
          --sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION
        expose:
          - 3306
        environment:
          MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-password}
          MYSQL_DATABASE: db_proofly
          MYSQL_USER: ${DB_USER:-proofly}
          MYSQL_PASSWORD: ${DB_PASSWORD:-password}
        volumes:
          - ./z-docker-resources/volumes/mysql_data:/var/lib/mysql
        healthcheck:
          test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
          interval: 30s
          timeout: 20s
          retries: 5
        networks:
          - proofly

      proofly-phpmyadmin:
        container_name: proofly-phpmyadmin
        restart: always
        image: phpmyadmin/phpmyadmin:latest
        environment:
          - PMA_HOST=proofly-mysql
          - MYSQL_ROOT_PASSWORD=password
          - PMA_USER=proofly
          - PMA_PASSWORD=password
        ports:
          - 8383:80
        depends_on:
          - proofly-mysql
        networks:
          - proofly

  - trigger: ':docker compose laravel'
    replace: |
      proofly-app:
        build:
          context: .
          dockerfile: ./plagiarism_checker_app/Dockerfile
        container_name: proofly-app
        volumes:
          - ./plagiarism_checker_app:/var/www/laravel
          - ./z-docker-resources/php/zz-large-upload.ini:/usr/local/etc/php/conf.d/zz-large-upload.ini
        environment:
          - APP_ENV=${APP_ENV:-local}
          - DB_HOST=proofly-mysql
          - DB_DATABASE=db_proofly
          - DB_USERNAME=${DB_USER:-proofly}
          - DB_PASSWORD=${DB_PASSWORD:-password}
        depends_on:
          proofly-mysql:
            condition: service_healthy
        ports:
          - "8000:80"
        healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost:80"]
          interval: 30s
          timeout: 20s
          retries: 3
        networks:
          - proofly

  - trigger: ':docker build laravel'
    replace: |
      # ---------- Build Stage (Composer & Node) ----------
      FROM php:8.3-cli AS composer-builder

      # Install required PHP extensions for composer to succeed
      RUN apt-get update && apt-get install -y \
          unzip \
          git \
          libzip-dev \
          libicu-dev \
          libpng-dev \
          libjpeg-dev \
          libfreetype6-dev \
          libonig-dev \
      && docker-php-ext-configure gd --with-freetype --with-jpeg \
      && docker-php-ext-install intl zip gd pdo pdo_mysql mbstring

      # Install Composer manually
      RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

      WORKDIR /app
      COPY ./plagiarism_checker_app /app
      RUN composer install --prefer-dist --no-dev --no-interaction --optimize-autoloader

      # For production
      # RUN composer install --prefer-dist --no-dev --no-interaction --optimize-autoloader

      # For development
      RUN composer install --prefer-dist --no-interaction


      FROM node:18 AS node-builder
      WORKDIR /app
      COPY ./plagiarism_checker_app /app
      RUN npm install && npm run build


      # ---------- Final Runtime Stage ----------
      FROM php:8.3-fpm-alpine

      # System dependencies
      RUN apk add --no-cache \
          bash \
          git \
          nginx \
          curl \
          libpng-dev \
          libjpeg-turbo-dev \
          freetype-dev \
          libzip-dev \
          oniguruma-dev \
          icu-dev \
          shadow \
          supervisor \
          postgresql-dev \
          mysql-client \
          npm \
          nodejs \
          tzdata

      # PHP extensions
      RUN docker-php-ext-configure gd --with-freetype --with-jpeg \
          && docker-php-ext-install -j$(nproc) \
          gd zip pdo pdo_mysql mbstring intl opcache bcmath

      # Set working directory
      WORKDIR /var/www/laravel

      # Copy from builders
      COPY --from=composer-builder /app /var/www/laravel
      COPY --from=node-builder /app/public/build /var/www/laravel/public/build

      # Composer install & optimize
      RUN composer install --no-dev --optimize-autoloader && \
          php artisan config:cache && \
          php artisan route:cache && \
          php artisan view:cache || true

      # Generate APP_KEY if not exists
      RUN rm -rf .env && cp .env.example .env && \
          php artisan key:generate

      # Permissions
      RUN chown -R www-data:www-data /var/www/laravel && \
          chmod -R 775 storage bootstrap/cache

      # Nginx config
      COPY ./z-docker-resources/nginx/default.conf /etc/nginx/conf.d/default.conf
      COPY ./z-docker-resources/nginx/nginx.conf /etc/nginx/nginx.conf

      # Entrypoint
      COPY ./z-docker-resources/php/setup-entrypoint.sh /entrypoint.sh
      RUN chmod +x /entrypoint.sh

      # Copy composer binary to runtime container
      COPY --from=composer-builder /usr/local/bin/composer /usr/local/bin/composer

      EXPOSE 9000 5173

      CMD ["/entrypoint.sh"]